module RBSProtobuf
  module Translator
    class ProtobufGem < Base
      # Protobuf::Field::FieldArray[R, W]
      FIELD_ARRAY: Name::Class

      # Protobuf::Field::FieldHash[K, RV, WV]
      FIELD_HASH: Name::Class

      # Protobuf::Enum
      ENUM: Name::Class

      # Protobuf::Message
      MESSAGE: Name::Class

      attr_reader stderr: IO

      def initialize: (
        untyped input,
        upcase_enum: bool,
        nested_namespace: bool,
        extension: bool | :print | nil,
        ?stderr: IO
      ) -> void

      @upcase_enum: bool

      @nested_namespace: bool

      @extension: bool | :print | nil

      def ignore_extension?: () -> bool

      def print_extension_message?: () -> bool

      def print_extension?: () -> bool

      def upcase_enum?: () -> bool

      def nested_namespace?: () -> bool

      def rbs_content: (untyped file) -> String

      def repeated_field_type: (RBS::Types::t `type`, ?RBS::Types::t wtype) -> RBS::Types::ClassInstance

      def message_to_decl: (untyped message, prefix: RBS::Namespace, message_path: untyped, source_code_info: untyped, path: Array[Integer]) -> RBS::AST::Declarations::Class

      # Returns a pair of types of a field.
      #
      # - The first one is the type of the attribute. (read and write)
      # - The second one is the array of type of additional possibilities for write.
      #
      def field_type: (untyped field, Hash[String, [RBS::Types::t, RBS::Types::t]] maps) -> [RBS::Types::t, Array[RBS::Types::t]]

      def enum_name: (String name) -> Symbol

      def enum_type_to_decl: (untyped enum_type, prefix: RBS::Namespace, source_code_info: untyped, path: Array[Integer]) -> RBS::AST::Declarations::Class

      def extension_to_decl: (untyped extension, prefix: RBS::Namespace, source_code_info: untyped, path: Array[Integer]) -> RBS::AST::Declarations::Class

      def add_field: (Array[RBS::AST::Declarations::Class::member] members, name: Symbol, read_type: RBS::Types::t, write_types: Array[RBS::Types::t], comment: RBS::AST::Comment?) -> void

      def service_base_class: () -> RBS::AST::Declarations::Class::Super

      def service_to_decl: (untyped service, prefix: RBS::Namespace, source_code_info: untyped, path: Array[Integer]) -> RBS::AST::Declarations::Class
    end
  end
end
