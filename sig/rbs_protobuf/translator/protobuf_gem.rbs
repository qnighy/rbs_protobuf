module RBSProtobuf
  module Translator
    class ProtobufGem < Base
      # Protobuf::Field::FieldArray[R, W]
      FIELD_ARRAY: Name::Class

      # Protobuf::Field::FieldHash[K, RV, WV]
      FIELD_HASH: Name::Class

      # Protobuf::Enum
      ENUM: Name::Class

      # Protobuf::Message
      MESSAGE: Name::Class

      # _ToProto
      TO_PROTO: Name::Interface

      # Protobuf::field_array[T]
      FIELD_ARRAY_a: Name::Alias

      # Protobuf::field_hash[K, V]
      FIELD_HASH_a: Name::Alias

      attr_reader stderr: IO

      attr_reader accept_nil_writer: bool

      def initialize: (
        untyped input,
        ?Array[Base::filter] filters,
        upcase_enum: bool,
        nested_namespace: bool,
        extension: bool | :print | nil,
        accept_nil_writer: bool,
        ?stderr: IO,
      ) -> void

      @upcase_enum: bool

      @nested_namespace: bool

      @extension: bool | :print | nil

      # Returns true if extension should be ignored.
      #
      def ignore_extension?: () -> bool

      # Returns true if documentation message about extension is requested.
      def print_extension_message?: () -> bool

      # Returns true if extension should be printed to stderr.
      #
      def print_extension?: () -> bool

      # Returns true if enum names should be `upcase`.
      #
      def upcase_enum?: () -> bool

      # Returns true if printing nested namespace is preferred.
      #
      def nested_namespace?: () -> bool

      # The entry point.
      # Generate RBS declarations from the `file` and returns the string representation of the declarations.
      #
      def rbs_content: (untyped file) -> String

      # Returns the class declaration for given message.
      #
      def message_to_decl: (untyped message, prefix: RBS::Namespace, message_path: untyped, source_code_info: untyped, path: Array[Integer]) -> RBS::AST::Declarations::Class

      # Returns the class declaration for given enum.
      #
      def enum_type_to_decl: (untyped enum_type, prefix: RBS::Namespace, source_code_info: untyped, path: Array[Integer]) -> RBS::AST::Declarations::Class

      # Returns the class declaration for given extension.
      #
      def extension_to_decl: (untyped extension, prefix: RBS::Namespace, source_code_info: untyped, path: Array[Integer]) -> RBS::AST::Declarations::Class

      # Returns service class stub.
      #
      def service_to_decl: (untyped service, prefix: RBS::Namespace, source_code_info: untyped, path: Array[Integer]) -> RBS::AST::Declarations::Class

      # Returns a triple of types of a field.
      #
      # - The first one is the type of the attribute. (read and write)
      # - The second one is the array of type of additional possibilities for write.
      # - The last one is the type of `initialize` parameter.
      #
      def field_type: (untyped field, Hash[String, [untyped, untyped]] maps) -> [RBS::Types::t, Array[RBS::Types::t], RBS::Types::t]

      def message_to_proto_type: (RBS::Types::ClassInstance) -> RBS::Types::Interface

      def message_array_type: (RBS::Types::ClassInstance) -> RBS::Types::Alias

      def message_field_array_type: (RBS::Types::ClassInstance) -> RBS::Types::Alias

      def message_hash_type: (RBS::Types::ClassInstance, RBS::Types::t key) -> RBS::Types::Alias

      def message_field_hash_type: (RBS::Types::ClassInstance, RBS::Types::t key) -> RBS::Types::Alias

      def message_init_type: (RBS::Types::ClassInstance) -> RBS::Types::Alias

      # Returns enum names with respect to `#upcase_enum?`.
      #
      def enum_name: (String name) -> Symbol

      # Add field to `members`. It adds
      #
      # - `attr_accessor` of the field `name` with `read_type`
      # - Overloads for attribute writer with `write_types`
      #
      def add_field: (Array[RBS::AST::Declarations::Class::member] members, name: Symbol, read_type: RBS::Types::t, write_types: Array[RBS::Types::t], comment: RBS::AST::Comment?) -> void

      # Returns true if `write_type` is an _interface type_ or an optional type of _interface type_.
      #
      def interface_type?: (RBS::Types::t write_type) -> [RBS::AST::TypeParam, RBS::Types::t]?

      def service_base_class: () -> RBS::AST::Declarations::Class::Super
    end
  end
end
