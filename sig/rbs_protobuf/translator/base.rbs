module RBSProtobuf
  module Translator
    class Base
      FieldDescriptorProto: untyped

      attr_reader input: untyped

      type filter = ^(String rbs_name, String rbs_content, Array[untyped] proto_files) -> [String, String]?

      attr_reader filters: Array[filter]

      attr_accessor rbs_concat_level: Integer?

      def initialize: (untyped input, ?Array[filter] filters) -> void

      def apply_filter: (String rbs_name, String rbs_content, Array[untyped] proto_file) -> [String, String]?

      @factory: RBSFactory

      def factory: () -> RBSFactory

      @response: untyped

      def response: () -> untyped

      def generate_rbs!: () -> void

      def rbs_name: (String proto_name) -> String

      def rbs_suffix: () -> ::String

      def format_rbs: (?dirs: Array[RBS::AST::Directives::t], ?decls: Array[RBS::AST::Declarations::t]) -> String

      def rbs_content: (String file) -> Array[RBS::AST::Declarations::t]

      def comment_for_path: (untyped source_code_info, Array[Integer] path, options: untyped) -> RBS::AST::Comment?

      def each_options_field: (untyped) { (Symbol, untyped) -> void } -> void

      def base_type: (untyped `type`) -> RBS::Types::t

      def message_type: (String) -> RBS::Types::ClassInstance

      def optional_type: (RBS::Types::t) -> RBS::Types::Optional
    end
  end
end
